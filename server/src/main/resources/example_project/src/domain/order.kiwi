package domain

class Order(
    val customer: Customer,
    val price: Money
) {

    static val statusAndCreatedAtIdx = Index<OrderStatusAndTime, Order>(false, o -> OrderStatusAndTime(o.status, o.createdAt))

    static val customerIdx = Index<Customer, Order>(false, o -> o.customer)

    val createdAt = now()
    var status = OrderStatus.PENDING

    fn confirm() {
        require(status == OrderStatus.PENDING, "订单状态不允许确认")
        status = OrderStatus.CONFIRMED
    }

    fn cancel() {
        require(status == OrderStatus.PENDING, "订单状态不允许取消")
        status = OrderStatus.CANCELLED
        for (child in children) {
            if (child is Item item)
                item.product.restock(item.quantity)
        }
    }

    class Item(
        val product: Product,
        val quantity: int
    )

}