class User(
    var name: string,
    password: string,
    val sysUserId: string
) {

    priv var passwordHash = secureHash(password, null)

    static val nameIdx = Index<string, User>(true, u -> u.name)
    static val sysUserIdIdx = Index<string, User>(true, u -> u.sysUserId)

    val applications = new Application[]
    val genConfig = GenerationConfig(false)

    fn __genConfig__() -> GenerationConfig {
        return GenerationConfig(true)
    }

    fn checkPassword(password: string) -> bool {
        return passwordHash == secureHash(password, null)
    }

    fn __sysUserId__() -> string {
        return "01e0ffd8b90700"
    }

}

class GenerationConfig(
    var showAttempts: bool
)

@Bean
class UserService {

    fn register(userName: string, password: string, sysUserId: string) -> User {
        if (User.nameIdx.getFirst(userName) != null)
            throw Exception("User already exists")
        return User(userName, password, sysUserId)
    }

    fn login(userName: string, password: string) -> LoginResponse {
        var user = User.nameIdx.getFirst(userName)
        if (user != null && user!!.checkPassword(password)) {
            val token = secureRandom(128)
            Session(token, user!!)
            return LoginResponse(token, user!!)
        }
        return LoginResponse(null, null)
    }

    fn logout(token: string) {
        var s = Session.tokenIdx.getFirst(token)
        if (s != null)
            delete s!!
    }

    fn authenticate(token: string) -> User? {
        val s = Session.tokenIdx.getFirst(token)
        if (s != null)
            return s!!.user
        else
            return null
    }

    fn getBySysUserId(sysUserId: string) -> User {
        var user = User.sysUserIdIdx.getFirst(sysUserId)
        if (user == null)
            throw Exception("User not found")
        return user!!
    }

    fn currentUser() -> User {
        val user = getContext("user")
        if (user != null)
            return user as User
        throw Exception("Login required")
    }

    fn shouldShowAttempts(user: User) -> bool {
        return user.genConfig.showAttempts
    }

}

class Session(
    val token: string,
    val user: User
) {

    static val tokenIdx = Index<string, Session>(true, s -> s.token)

}

value class LoginResponse(
    val token: string?,
    val user: User?
)